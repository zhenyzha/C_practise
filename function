什么是变量;所谓变量不要浅显的认为会变得量就是变量。
套用我们院长的问话“教室变不变;”变因为每天有不同的人在里面上课但又不变因为教室始终在那没有变大或变小。
这就是变量有一个不变的地址和一块可变的存储空间。
正常情况下我们只看到变量这个房间里面的东西也就是其内容但不会关注变量的地址但是C语言的指针就是这个房间的地址。
我们声明变量就相当于盖了间房子存放东西我们可以直接观看房子里的东西而声明指针就是相当于获得了一个"定位器"
当用指针指向某个变量时就是用指针给变量定位以后我们就可以用指针找到他所“跟踪”的变量并可以获得里面的内容。
那结构体呢;结构体就相当于是有好几个房子组成的别墅几个房子绑定在一起使用。
假设现在有很多这种别墅分布在一个大迷宫里每间别墅里都有一间房子。
里面放了另一个别墅的位置信息现在你手拿"定位器"找到了第一栋别墅从里面得到了你想要的东西 链表的数据部分,
然后把下一栋别墅的位置计入你的"定位器"再走向下一栋别墅……如此走下去知道走到某地下一栋别墅信息没有了 
你的旅行结束。这就是链表一次遍历的过程。p=p->next 的含义了吧
==========================================
typedef struct          // 定义一个结构体类型：DATA
{
    char key[10];       // 结构体成员：key
    char name[20];      // 结构体成员：name
    int age;            // 结构体成员：age
}DATA;
    
DATA data;              // 声明一个结构体变量
DATA *pdata;            // 声明一个指向结构体的指针
    
// 访问数据操作如下：
data.age = 24;          // 结构体变量通过点运算符( . )访问
pdata->age = 24;        // 指向结构体的指针通过箭头运算符( -> )访问


==========================================
#include <stdio.h>
void pound(int n); //函数原型声明，表明该函数接受一个int类型的参数，下面的带入会自动转换
int main(void)
{
    int times = 5;
    char ch = '!';  //ASCII 码是33
    float f = 6.0;
    
    pound(times);   //这里多次调用函数pound
    pound(ch);
    pound(f);
  
    return 0;
}

void pound(int n)   //这里定义了函数的具体内容
{
    while (n-- > 0)
        printf("#");
    printf("\n");
}

==========================================
//循环函数
#include <stdio.h>
#define SIZE 4
#define PAR 72
int main(void)
{
    int index, score[SIZE];
    int sum = 0;
    float average;
    
    printf("SIZE: %d \n", SIZE);
    for (index = 0; index < SIZE; index++)
        scanf("%d", &score[index]);     //读取 4 个分数
    printf("=====\n");
    for (index = 0; index < SIZE; index++)
        printf("%5d", score[index]);   //输入验证, %5d 数字之间的宽度为5个字符
    printf("\n");
    for (index = 0; index < SIZE; index++)
        sum += score[index];        //求总分数
    average = (float) sum / SIZE;   //求平均分
    printf("Sum of scores = %d, average = %.2f\n", sum, average);
    printf("of %.0f.\n", average - PAR);  //%.0f 是输出float 型或double 型数据，按定点格式，小数点以下占0位
    
    return 0;
}

==========================================
//循环加判断
#include <stdio.h>
void display(char cr, int lines, int width);   //提前声明display() 函数和它自带的参数类型
int main(void)
{
    char ch;
    int rows, cols; //行数和列数
    
    printf("Enter a character and two int:\n");
    while ((ch = getchar()) != '\n')
    {
        if (scanf("%d %d", &rows, &cols) != 2)
            break;
        display(ch, rows, cols);   //注意这里调用了下面的函数display()
        while (getchar() != '\n') //当获取换行符时跳过
            continue;
        printf("Enter another char and two integers;\n");
        printf("Enter a newline to quit.\n");
    }
    printf("Bye.\n");
    
    return 0;
}

void display(char cr, int lines, int width)
{
    int row, col;
    
    for (row = 1; row <= lines; row++)  //定义从1 开始打印，递增到输入值
    {
        for (col = 1; col <= width; col++)
            putchar(cr);
        putchar('\n');
    }
}

==========================================
//用指针传递地址
#include <stdio.h>
void interchange(int * u, int * v);

int main(void)
{
    int x =5, y = 10;
    printf("Originally x = %d and y = %d.\n", x, y);
    interchange(&x, &y); //把地址发送给函数
    printf("Now x = %d and y = %d.\n", x, y);
    
    return 0;
}

void interchange(int * u, int * v)
{
    int temp;
    temp = *u;  //temp 获得u 所指向对象的值
    *u = *v;    //x = y（的值）
    *v = temp;  //y = temp(x的值)
}

==========================================
//二维数组，求每年中各个月份的平均值
#include <stdio.h>
#define MONTHS 12   //一年的月份数
#define YEARS   5   //年数
int main(void)
{
    // 用2010～2014年的降水量数据初始化数值
    const float rain[YEARS][MONTHS] =       //建立2维数组
    {
        {4.3, 4.3, 4.3, 3.0, 2.0, 1.2, 0.2, 0.2, 0.4, 2.4, 3.5, 6.6},
        {8.5, 8.2, 1.2, 3.2, 3.2, 4.2, 4.3, 1.2, 1.6, 4.4, 3.2, 4.1},
        {4.3, 4.3, 5.3, 3.0, 2.0, 1.2, 1.2, 0.2, 2.4, 2.4, 3.5, 6.6},
        {4.3, 1.3, 4.3, 3.0, 2.0, 1.2, 0.2, 0.2, 2.4, 2.4, 3.5, 6.6},
        {8.5, 5.2, 1.2, 3.2, 3.2, 4.2, 5.3, 1.2, 3.6, 4.4, 3.2, 4.1},
    };
    int year, month;
    float subtot, total;
    
    printf("year rainfall (inches)\n");
    for (year = 0, total = 0; year < YEARS; year++)     //每年，各月的降水量总和
    {
        for (month = 0, subtot = 0; month < MONTHS; month++)
            subtot += rain[year][month];                //subtot每年各个月的和
        printf("%5d %15.1f\n", 2010 + year, subtot);    //注意year是从0开始的
        total += subtot;    // 5 年的总降水量
    }
    printf("\nThe yearly average is %.1f inches.\n\n", total / YEARS);
    printf("MONTHLY AVERAGES:\n\n");
    printf(" JAN  FEB  MAR  APR  MAY  JUN  JUL  AUG  SEP  OCT ");
    printf(" NOV  DEC\n");
    
    for (month = 0; month < MONTHS; month++)            //每个月 各年的
    {
        for (year = 0, subtot = 0; year < YEARS; year++)
            subtot += rain[year][month];                //指定月份各年的合计
        printf(" %1.1f ", subtot / YEARS);               //指定月份的平均值
    }
    printf("\n");
    
    return 0;
}

==========================================
//用指针打印数组的地址编码
#include <stdio.h>
#define SIZE 4
int main(void)
{
    short dates[SIZE];
    short * pti;        //short 类型的指针
    short index;
    double bills[SIZE];
    double * ptf;       //double 类型的指针
    pti = dates;        //把数组dates地址赋予pti
    ptf = bills;
    printf("%26s %15s\n", "short 2 byte", "double 8 byte");
    for (index = 0; index < SIZE; index++)  //指针+1 增加一个存储单元，一个存储单元对应类型具体需要占用的字节数
        printf("pointers + %d: %10p   %10p\n", index, pti + index, ptf + index);
    return 0;
}
